var search_data = {"index":{"searchIndex":["binarytree","node","breadth_first_search()","build_tree()","depth_first_search()","dfs_rec()","insert()","new()","nodes()"],"longSearchIndex":["binarytree","node","binarytree#breadth_first_search()","binarytree#build_tree()","binarytree#depth_first_search()","binarytree#dfs_rec()","binarytree#insert()","node::new()","node::nodes()"],"info":[["BinaryTree","","BinaryTree.html","",""],["Node","","Node.html","",""],["breadth_first_search","BinaryTree","BinaryTree.html#method-i-breadth_first_search","(node= self.root, value)","<p>Runs a breadth first search for value using an array acting as a queue.\n"],["build_tree","BinaryTree","BinaryTree.html#method-i-build_tree","(array)","<p>Creates a binary tree from an input array of variables using the helper\nfunction &#39;insert&#39;.\n"],["depth_first_search","BinaryTree","BinaryTree.html#method-i-depth_first_search","(node= self.root, value)","<p>Runs a depth first search for value an array acting as a stack.\n"],["dfs_rec","BinaryTree","BinaryTree.html#method-i-dfs_rec","(node= self.root, value)","<p>Runs a depth first search for value using recursion.\n"],["insert","BinaryTree","BinaryTree.html#method-i-insert","(node, value= nil)","<p>Helper function used to insert a value to a nodes left or right (less or\nmore)\n"],["new","Node","Node.html#method-c-new","(value, parent=nil)",""],["nodes","Node","Node.html#method-c-nodes","()","<p>Helper function to show how many instances of the Node class.\n"]]}}